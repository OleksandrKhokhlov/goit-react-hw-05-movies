{"version":3,"file":"static/js/21.b60cb199.chunk.js","mappings":"6SACAA,EAAAA,EAAAA,SAAAA,QAAyB,gCACzBA,EAAAA,EAAAA,SAAAA,QAAAA,OAAAA,cACE,6NAEK,IAAMC,EAAW,mCAAG,WAAMC,GAAN,iFACZF,EAAAA,EAAAA,IAAU,gBAAiB,CACtCG,OAAQ,CACND,MAAAA,EACAE,SAAU,QACVC,eAAe,KALM,mFAAH,sDAUXC,EAAmB,mCAAG,8FAC3BN,EAAAA,EAAAA,IAAU,sBAAuB,CACrCG,OAAQ,CACNC,SAAU,QACVC,eAAe,KAJc,mFAAH,qDAQnBE,EAAc,mCAAG,WAAMC,GAAN,iFACtBR,EAAAA,EAAAA,IAAA,gBAAmBQ,IADG,mFAAH,sDAGdC,EAAiB,mCAAG,WAAMD,GAAN,iFACzBR,EAAAA,EAAAA,IAAA,iBAAoBQ,EAApB,aADyB,mFAAH,sDAGjBE,EAAiB,mCAAG,WAAMF,GAAN,iFACzBR,EAAAA,EAAAA,IAAA,iBAAoBQ,EAApB,aADyB,mFAAH,qD,qJCqB9B,EA5Ca,WACX,OAAwBG,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACQL,GAAYM,EAAAA,EAAAA,MAAZN,QAmBR,OAjBAO,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAe,mCAAG,8GAEDP,EAAAA,EAAAA,IAAkBD,GAFjB,UAIA,OAFdS,EAFc,QAIXC,OAJW,sBAKZ,IAAIC,MALQ,OAOpBN,EAAQI,EAAKG,KAAKR,MAPE,gDASpBS,QAAQC,IAAR,MACAC,EAAAA,GAAAA,MAAY,4DAVQ,yDAAH,qDAcrBP,GACD,GAAE,CAACR,KAEF,yBACGI,EAAKY,KAAI,YAAqD,IAAlDC,EAAiD,EAAjDA,cAAeC,EAAkC,EAAlCA,aAAcC,EAAoB,EAApBA,UAAWC,EAAS,EAATA,GACnD,OACE,4BACE,gBACEC,IACmB,OAAjBH,EAAA,0CACuCA,GADvC,U,krCAIFI,IAAKL,EACLM,MAAO,OAET,wBAAKN,KACL,yBAAG,cAA0B,KAAdE,EAAmBA,EAAY,eAXtCC,EAcb,KAGN,C","sources":["api.js","components/Cast/Cast.jsx"],"sourcesContent":["import axios from 'axios';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\naxios.defaults.headers.common['Authorization'] =\n  'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI4ZWVlZWU2MWE5YzQ0ZDg3MDU2MGU5MDk3YWYzOWFiYSIsInN1YiI6IjY0ZWRkZDMzNTI1OGFlMDEyY2E2YzI4NyIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.DwVyqR8KU5ITMf03TmwDmKexNT2Ro5Hf1FcrLtmXnOE';\n\nexport const fetchMovies = async query => {\n  return await axios.get('/search/movie', {\n    params: {\n      query,\n      language: 'en-US',\n      include_adult: false,\n    },\n  });\n};\n\nexport const fetchTrendingMovies = async () =>\n  await axios.get('/trending/movie/day', {\n    params: {\n      language: 'en-US',\n      include_adult: false,\n    },\n  });\n\nexport const fetchMovieById = async movieId =>\n  await axios.get(`movie/${movieId}`);\n\nexport const fetchMovieCredits = async movieId =>\n  await axios.get(`/movie/${movieId}/credits`);\n\nexport const fetchMovieReviews = async movieId =>\n  await axios.get(`/movie/${movieId}/reviews`);\n","import { toast } from 'react-hot-toast';\nimport { useParams } from 'react-router-dom';\nimport { useEffect, useState } from 'react';\nimport { fetchMovieCredits } from '../../api';\nimport notFoundImage from '../../img/notfound.png';\n\nconst Cast = () => {\n  const [cast, setCast] = useState([]);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const getMovieCredits = async () => {\n      try {\n        const resp = await fetchMovieCredits(movieId);\n\n        if (resp.status !== 200) {\n          throw new Error();\n        }\n        setCast(resp.data.cast);\n      } catch (error) {\n        console.log(error);\n        toast.error('Something went wrong! Reload the page or try again later');\n      }\n    };\n\n    getMovieCredits();\n  }, [movieId]);\n  return (\n    <div>\n      {cast.map(({ original_name, profile_path, character, id }) => {\n        return (\n          <div key={id}>\n            <img\n              src={\n                profile_path !== null\n                  ? `https://image.tmdb.org/t/p/w200/${profile_path}`\n                  : `${notFoundImage}`\n              }\n              alt={original_name}\n              width={200}\n            />\n            <h3>{original_name}</h3>\n            <p>Character: {character !== '' ? character : 'no data'}</p>\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default Cast;\n"],"names":["axios","fetchMovies","query","params","language","include_adult","fetchTrendingMovies","fetchMovieById","movieId","fetchMovieCredits","fetchMovieReviews","useState","cast","setCast","useParams","useEffect","getMovieCredits","resp","status","Error","data","console","log","toast","map","original_name","profile_path","character","id","src","alt","width"],"sourceRoot":""}