{"version":3,"file":"static/js/156.05de9745.chunk.js","mappings":"8SACAA,EAAAA,EAAAA,SAAAA,QAAyB,gCACzBA,EAAAA,EAAAA,SAAAA,QAAAA,OAAAA,cACE,6NAEK,IAAMC,EAAW,mCAAG,WAAMC,GAAN,iFACZF,EAAAA,EAAAA,IAAU,gBAAiB,CACtCG,OAAQ,CACND,MAAAA,EACAE,SAAU,QACVC,eAAe,KALM,mFAAH,sDAUXC,EAAmB,mCAAG,8FAC3BN,EAAAA,EAAAA,IAAU,sBAAuB,CACrCG,OAAQ,CACNC,SAAU,QACVC,eAAe,KAJc,mFAAH,qDAQnBE,EAAc,mCAAG,WAAMC,GAAN,iFACtBR,EAAAA,EAAAA,IAAA,gBAAmBQ,IADG,mFAAH,sDAGdC,EAAiB,mCAAG,WAAMD,GAAN,iFACzBR,EAAAA,EAAAA,IAAA,iBAAoBQ,EAApB,aADyB,mFAAH,sDAGjBE,EAAiB,mCAAG,WAAMF,GAAN,iFACzBR,EAAAA,EAAAA,IAAA,iBAAoBQ,EAApB,aADyB,mFAAH,qD,oDChB9B,IAXkB,SAAC,GAAmB,IAAjBG,EAAgB,EAAhBA,GAAIC,EAAY,EAAZA,MACvB,GAA6BC,EAAAA,EAAAA,MAArBC,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,OAClB,OACE,yBACE,SAAC,KAAD,CAAMC,GAAE,kBAAaL,GAAMM,MAAO,CAAEC,KAAMJ,EAAWC,GAArD,SACGH,KAIR,C,wJCTYO,E,OAAQC,EAAAA,GAAH,+C,SCoClB,EAhCiB,WACf,OAA4CC,EAAAA,EAAAA,UAAS,IAArD,eAAOC,EAAP,KAAuBC,EAAvB,KAmBA,OAjBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAiB,mCAAG,8GAEHnB,EAAAA,EAAAA,MAFG,UAGF,OADdoB,EAFgB,QAGbC,OAHa,sBAId,IAAIC,MAJU,OAMtBL,EAAkBG,EAAKG,KAAKC,SANN,gDAQtBC,QAAQC,IAAR,MACAC,EAAAA,GAAAA,MAAY,4DATU,yDAAH,qDAavBR,GACD,GAAE,KAGD,iCACE,SAACN,EAAD,UAAO,oBACP,wBACGG,EAAeY,KAAI,gBAAGvB,EAAH,EAAGA,GAAIwB,EAAP,EAAOA,eAAP,OAClB,SAACC,EAAA,EAAD,CAAoBzB,GAAIA,EAAIC,MAAOuB,GAAnBxB,EADE,QAM3B,C","sources":["api.js","components/MovieList/MovieList.jsx","pages/HomePage/HomePage.styled.js","pages/HomePage/HomePage.jsx"],"sourcesContent":["import axios from 'axios';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\naxios.defaults.headers.common['Authorization'] =\n  'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI4ZWVlZWU2MWE5YzQ0ZDg3MDU2MGU5MDk3YWYzOWFiYSIsInN1YiI6IjY0ZWRkZDMzNTI1OGFlMDEyY2E2YzI4NyIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.DwVyqR8KU5ITMf03TmwDmKexNT2Ro5Hf1FcrLtmXnOE';\n\nexport const fetchMovies = async query => {\n  return await axios.get('/search/movie', {\n    params: {\n      query,\n      language: 'en-US',\n      include_adult: false,\n    },\n  });\n};\n\nexport const fetchTrendingMovies = async () =>\n  await axios.get('/trending/movie/day', {\n    params: {\n      language: 'en-US',\n      include_adult: false,\n    },\n  });\n\nexport const fetchMovieById = async movieId =>\n  await axios.get(`movie/${movieId}`);\n\nexport const fetchMovieCredits = async movieId =>\n  await axios.get(`/movie/${movieId}/credits`);\n\nexport const fetchMovieReviews = async movieId =>\n  await axios.get(`/movie/${movieId}/reviews`);\n","import { Link, useLocation } from 'react-router-dom';\n\nconst MovieList = ({ id, title }) => {\n  const { pathname, search } = useLocation();\n  return (\n    <li>\n      <Link to={`/movies/${id}`} state={{ from: pathname + search }}>\n        {title}\n      </Link>\n    </li>\n  );\n};\n\nexport default MovieList;\n","import styled from '@emotion/styled';\n\nexport const Title = styled.h1`\n  padding-left: 20px;\n`;\n","import toast from 'react-hot-toast';\nimport { useState, useEffect } from 'react';\nimport { fetchTrendingMovies } from '../../api';\nimport MovieList from 'components/MovieList/MovieList';\nimport { Title } from './HomePage.styled';\n\nconst HomePage = () => {\n  const [trendingMovies, settrendingMovies] = useState([]);\n\n  useEffect(() => {\n    const getTrendingMovies = async () => {\n      try {\n        const resp = await fetchTrendingMovies();\n        if (resp.status !== 200) {\n          throw new Error();\n        }\n        settrendingMovies(resp.data.results);\n      } catch (error) {\n        console.log(error);\n        toast.error('Something went wrong! Reload the page or try again later');\n      }\n    };\n\n    getTrendingMovies();\n  }, []);\n\n  return (\n    <>\n      <Title>Trending today</Title>\n      <ul>\n        {trendingMovies.map(({ id, original_title }) => (\n          <MovieList key={id} id={id} title={original_title} />\n        ))}\n      </ul>\n    </>\n  );\n};\n\nexport default HomePage;\n"],"names":["axios","fetchMovies","query","params","language","include_adult","fetchTrendingMovies","fetchMovieById","movieId","fetchMovieCredits","fetchMovieReviews","id","title","useLocation","pathname","search","to","state","from","Title","styled","useState","trendingMovies","settrendingMovies","useEffect","getTrendingMovies","resp","status","Error","data","results","console","log","toast","map","original_title","MovieList"],"sourceRoot":""}